Full Code:

Promise.resolve("Task 1 completed")
  .then(console.log)
  .then(() => Promise.resolve("Task 2 completed"))
  .then(console.log)
  .then(() => Promise.reject("Task 3 failed"))
  .catch(console.error);
1. Promise.resolve("Task 1 completed")
What is Promise.resolve?
Promise.resolve(value) is a utility method in JavaScript that creates and immediately resolves a promise with the specified value.
It’s a quick way to wrap a value (like a string, number, or even another promise) into a resolved promise.
In this case, the value is the string "Task 1 completed".
What is happening here?
A promise is created that is already in the "fulfilled" (resolved) state with the value "Task 1 completed".
This promise can now be chained with .then() to perform some action when the promise is resolved.
Key Concept:
Promise states: A promise can be in one of three states:
Pending: The initial state; neither resolved nor rejected.
Fulfilled (Resolved): The operation completed successfully, and the promise now holds a value.
Rejected: The operation failed, and the promise holds a reason (error).
2. .then(console.log)
What is then()?
The .then() method is used to handle the resolved value of a promise.
It takes a callback function as its argument, which will be executed when the promise is fulfilled.
What is console.log doing here?
Instead of writing a full callback function like this:

.then((value) => console.log(value))
you can pass console.log directly. This works because console.log is a function that takes a single argument and logs it to the console.
What happens here?
When the promise created by Promise.resolve("Task 1 completed") resolves, its value ("Task 1 completed") is passed to console.log.
As a result, "Task 1 completed" is printed to the console.
Key Concept:
Function references: In JavaScript, you can pass a function by reference directly to another function (e.g., console.log), which can simplify the code.
3. .then(() => Promise.resolve("Task 2 completed"))
What is happening here?
After the first .then() finishes, this line of code is executed.
The callback passed to .then() is () => Promise.resolve("Task 2 completed"), which is an arrow function that:
Returns a new promise that resolves with the value "Task 2 completed".
This returned promise becomes part of the chain.
Why is this important?
The .then() method can return a new promise, and the subsequent .then() in the chain will wait for this promise to resolve.
Key Concept:
Promise chaining: When you return a promise inside a .then() callback, the next .then() waits for that promise to resolve (or reject).
4. .then(console.log)
What happens here?
This .then() handles the resolved value of the promise returned in the previous step.
The value "Task 2 completed" is passed to console.log, and "Task 2 completed" is printed to the console.
Key Concept:
Each .then() in the chain only runs after the previous promise resolves.
5. .then(() => Promise.reject("Task 3 failed"))
What is Promise.reject?
Promise.reject(reason) is a utility method that creates and immediately rejects a promise with the specified reason (error).
In this case, the reason is the string "Task 3 failed".
What is happening here?
The callback () => Promise.reject("Task 3 failed") is executed.
It returns a promise that is immediately rejected with the reason "Task 3 failed".
Why does this matter?
Since the promise is now rejected, the next .then() will not execute.
Instead, the chain jumps directly to the next .catch() to handle the rejection.
Key Concept:
Rejections and error handling: A rejected promise skips all .then() calls in the chain and moves directly to the first .catch().
6. .catch(console.error)
What is catch()?
The .catch() method is used to handle errors (rejections) in a promise chain.
It takes a callback function that receives the reason (error message) for the rejection.
What is console.error doing here?
Similar to console.log, console.error is a function that logs output to the console but typically displays it as an error (often in red text).
What happens here?
When the promise from the previous step is rejected with "Task 3 failed", the chain jumps to catch().
console.error is called with the rejection reason, so "Task 3 failed" is printed to the console as an error.
Key Concept:
Error propagation: If any promise in the chain is rejected, the error propagates down the chain until a catch() handles it.
Final Output
When this code is executed, the output will be:


Task 1 completed
Task 2 completed
Task 3 failed
Summary of Execution Flow
Promise.resolve("Task 1 completed") creates a resolved promise.
.then(console.log) logs "Task 1 completed" to the console.
The next .then() returns a new promise resolved with "Task 2 completed".
.then(console.log) logs "Task 2 completed" to the console.
The next .then() returns a rejected promise with the reason "Task 3 failed".
The chain skips to .catch(console.error), which logs "Task 3 failed" as an error.
Key Takeaways
Promise resolution and chaining: Each .then() waits for the previous promise to resolve.
Error handling: A rejected promise skips all subsequent .then() calls and jumps directly to the nearest catch().
Function references: You can pass console.log or console.error directly as callbacks to simplify code.
Promise utilities: Promise.resolve creates resolved promises, and Promise.reject creates rejected promises.
This code demonstrates sequential execution with promises, as well as proper handling of errors using catch().



why is the .catch() method not logging the error code here ?



In your example code:


Promise.resolve("Task 1 completed")
  .then(console.log)
  .then(() => Promise.resolve("Task 2 completed"))
  .then(console.log)
  .then(() => Promise.reject("Task 3 failed"))
  .catch(console.error);
The catch() is logging the error, but the reason you might not be seeing an "error code" or something more specific could be due to a misunderstanding of the input passed to Promise.reject() and how console.error() works.

Understanding Promise.reject("Task 3 failed")
Promise.reject("Task 3 failed") creates a rejected promise with the reason being the string "Task 3 failed".
The catch() method receives the rejection reason as its argument.
Since the rejection reason is just a plain string ("Task 3 failed"), it is directly passed to console.error, and the output will look like:


Task 3 failed
Why You Don't See an "Error Code" or Stack Trace
In JavaScript, Promise.reject() does not automatically generate an Error object.
If you pass a string (like "Task 3 failed") as the rejection reason, it is simply treated as a value, not as an actual error object with properties like name, message, or a stack trace.
Using an Error Object for Better Error Logging
If you want to see an error code, stack trace, or a more descriptive error message, you should reject the promise with an Error object instead of a plain string.

Here is the updated example:


Promise.resolve("Task 1 completed")
  .then(console.log)
  .then(() => Promise.resolve("Task 2 completed"))
  .then(console.log)
  .then(() => Promise.reject(new Error("Task 3 failed")))
  .catch(console.error);
Output:

Error: Task 3 failed
    at <stack trace>
Why This Works
new Error("Task 3 failed") creates a proper Error object.
The Error object includes:
name → "Error"
message → "Task 3 failed"
stack trace → Shows where the error occurred in the code.
When console.error logs an Error object, it displays all of these properties, providing more information for debugging.

Key Difference
If you reject with a string: You only see the string, e.g., "Task 3 failed".
If you reject with an Error object: You see a full error message with a stack trace, e.g., Error: Task 3 failed.
Takeaway
If you want detailed error logs, always reject promises with an Error object instead of a plain string. This makes debugging easier and provides a consistent format for error handling.